Now create 2 new ubuntu instances and install docker in them
>>>>>>>>>>>>



on machine 1

>>>>>>.
sudo snap install kubectl --classic

kubectl version

apt-get update && apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list                          run 3 lines together
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update
apt-get install -y kubelet kubeadm

kubeadm init

(Note:  kubeadm join --token e820d3.2714f0ce886eb0de 172.31.38.111:6443)


mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl version

kubectl taint nodes --all node-role.kubernetes.io/master-

kubectl apply -f https://git.io/weave-kube-1.6

watch kubectl get pods --all-namespaces



On machine 2

>>>>>>>>>
sudo snap install kubectl --classic

#kubectl version

apt-get update && apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list                          
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update
apt-get install -y kubelet kubeadm

kubeadm join --token e820d3.2714f0ce886eb0de 172.31.38.111:6443

on machine 1
kubectl get nodes



now create one redis.yml file 


apiVersion: "v1"
kind: Pod
metadata:
  name: redis
  labels:
    name: redis
    app: demo
spec:
  containers:
    - name: redis
      image: redis:latest
      ports:
        - containerPort: 6379         
          protocol: TCP

>>>>>>>>>>>>>>>>>>>
 
kubectl create -f redis.yml 
kubectl get pods      
kubectl get pods -o wide                                      < this command will give up output where pod is running on worker                                                                        
kubectl describe pods redis
kubectl exec -it redis /bin/bash

now go to machine 2
docker ps 

#kubectl delete pod redis


on machine 1

vi my-first-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: my-first-pod
spec:
  containers:
  - name: my-nginx
    image: nginx
  - name: my-centos
    image: centos
    command: ["/bin/sh", "-c", "while : ;do curl http://localhost:80/; sleep 3; done"]


 kubectl create -f my-first-pod.yml
 kubectl get pods
 kubectl logs my-first-pod -c my-centos --tail=30 
 kubectl exec -it my-first-pod /bin/bash


vi nginx-rc.yml

apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    app: nginx
  template:
    metadata:
      name: nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
       
kubectl create -f nginx-rc.yml
kubectl get pods -o wide

kubectl get rc



vi nginx-deploy.yml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80



kubectl create -f nginx-deploy.yml
kubectl get pods
kubectl describe deploy nginx
kubectl delete deploy nginx




